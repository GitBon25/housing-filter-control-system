from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)
from config import TELEGRAM_TOKEN
from nlp_processor import HousingCriteriaExtractor
import logging
from url import find_flats

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
rooms, location, price, area = "", "", "", ""


class HousingBot:
    def __init__(self):
        self.nlp_processor = HousingCriteriaExtractor()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = (
            "üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∂–∏–ª—å—è –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ!\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ '–ò—â—É 2-–∫–æ–º–Ω–∞—Ç–Ω—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ –¥–æ 10 –º–ª–Ω —Ä—É–±–ª–µ–π –ø–ª–æ—â–∞–¥—å—é 60 –º¬≤'"
        )
        await update.message.reply_text(welcome_text)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            criteria = self.nlp_processor.extract_criteria(update.message.text)
            flats = self._format_response(criteria)

            if isinstance(flats, list) and isinstance(flats[0], dict):
                for flat in flats:
                    photo = flat["photo_url"]
                    caption = flat["caption"]

                    safe_caption = caption[:1020] + \
                        "‚Ä¶" if len(caption) > 1024 else caption

                    if photo:
                        await update.message.reply_photo(photo=photo, caption=safe_caption)
                    else:
                        await update.message.reply_text(safe_caption)
            else:
                for msg in flats:
                    await update.message.reply_text(msg)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–∞—á–µ."
            )

    def _format_response(self, criteria: dict) -> list[dict]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"""
        global rooms, location, price, area
        rooms = criteria['rooms']
        location = criteria['location']
        price = criteria['price']
        area = criteria['area']
        return find_flats(rooms, price, area)


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    bot = HousingBot()

    app = Application.builder().token(TELEGRAM_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", bot.start))
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, bot.handle_message))

    # –ó–∞–ø—É—Å–∫
    logging.info("-----------------------–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω-----------------------")
    app.run_polling()


if __name__ == "__main__":
    main()
