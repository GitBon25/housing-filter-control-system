from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)
from config import TELEGRAM_TOKEN
from nlp_processor import HousingCriteriaExtractor
import logging, sys, os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from services.url import find_flats

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

class HousingBot:
    def __init__(self):
        self.nlp_processor = HousingCriteriaExtractor()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        welcome_text = (
            "üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∂–∏–ª—å—è!",
            "\n\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n",
            "‚Ä¢ '–ò—â—É 2-–∫–æ–º–Ω–∞—Ç–Ω—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É –≤ –ú–æ—Å–∫–≤–µ –¥–æ 10 –º–ª–Ω —Ä—É–±–ª–µ–π –ø–ª–æ—â–∞–¥—å—é 60 –º¬≤'",
            "\n–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —á–∞—Å—Ç—è–º–∏: —Å–Ω–∞—á–∞–ª–∞ –≥–æ—Ä–æ–¥, –ø–æ—Ç–æ–º —Ü–µ–Ω—É –∏ —Ç.–¥."
        )
        await update.message.reply_text("\n".join(welcome_text))

    async def reset(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        self.nlp_processor.context.clear()
        await update.message.reply_text("üîÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞.")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            criteria = self.nlp_processor.extract_criteria(update.message.text)
            flats = self._format_response(criteria)

            if isinstance(flats, list) and flats and isinstance(flats[0], dict):
                for flat in flats:
                    photo = flat["photo_url"]
                    caption = flat["caption"]

                    safe_caption = caption[:1020] + "‚Ä¶" if len(caption) > 1024 else caption

                    if photo:
                        await update.message.reply_photo(photo=photo, caption=safe_caption)
                    else:
                        await update.message.reply_text(safe_caption)
            else:
                for msg in flats:
                    await update.message.reply_text(msg)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–∞—á–µ."
            )

    def _format_response(self, criteria: dict) -> list[dict | str]:
        required_fields = {
            "rooms": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç",
            "location": "–≥–æ—Ä–æ–¥",
            "price": "–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞",
            "area": "–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å"
        }

        missing = [name for key, name in required_fields.items() if criteria.get(key) is None]
        if missing:
            return [
                f"‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ: {', '.join(missing)}",
                f"üìã –£–∂–µ —É–∫–∞–∑–∞–Ω–æ:" + ",".join([
                    f"{name}: {criteria.get(key)}" for key, name in required_fields.items() if criteria.get(key) is not None
                ])
            ]

        rooms = criteria["rooms"]
        location = criteria["location"]
        price = criteria["price"]
        area = criteria["area"]
        deal = criteria.get("deal", "sale")

        self.nlp_processor.context.clear()
        return find_flats(rooms, price, area, location, deal=deal)
        
    

def main():
    bot = HousingBot()
    bot.nlp_processor.context.clear()
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", bot.start))
    app.add_handler(CommandHandler("reset", bot.reset))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))

    logging.info("----------------------- –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω -----------------------")
    app.run_polling()


if __name__ == "__main__":
    main()
