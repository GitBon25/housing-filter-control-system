from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes
)
from config import TELEGRAM_TOKEN
from nlp_processor import HousingCriteriaExtractor
import logging
import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from services.url import find_flats


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)


class HousingBot:
    sale_text = (
            "üìã <b>–ß–µ–∫-–ª–∏—Å—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∫–≤–∞—Ä—Ç–∏—Ä—ã</b>\n\n"
            "üîπ <b>–î–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:</b>\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –æ–Ω–ª–∞–π–Ω, —Å—Ä–∞–≤–Ω–∏—Ç—å —Å –ø–æ—Ö–æ–∂–∏–º–∏\n"
            "‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞, —Ç–∏–ø —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏, —Ç–æ—Ä–≥\n\n"
            "üîπ <b>–ù–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ:</b>\n"
            "‚Ä¢ –û—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—ä–µ–∑–¥, –¥–æ–º, –¥–≤–æ—Ä\n"
            "‚Ä¢ –í–Ω—É—Ç—Ä–∏ ‚Äî —Ç–µ—Ö–Ω–∏–∫–∞, –º–µ–±–µ–ª—å, –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã\n"
            "‚Ä¢ –£–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –ø—Ä–æ–¥–∞–∂–∏\n\n"
            "üîπ <b>–î–æ–∫—É–º–µ–Ω—Ç—ã:</b>\n"
            "‚Ä¢ –í—ã–ø–∏—Å–∫–∞ –∏–∑ –ï–ì–†–ù, –ø–∞—Å–ø–æ—Ä—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞\n"
            "‚Ä¢ –û—Å–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ (–î–ö–ü, –¥–∞—Ä–µ–Ω–∏–µ...)\n"
            "‚Ä¢ –°–æ–≥–ª–∞—Å–∏–µ —Å—É–ø—Ä—É–≥–∞, –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ\n\n"
            "üîπ <b>–ù–∞ —Å–¥–µ–ª–∫–µ:</b>\n"
            "‚Ä¢ –î–æ–≥–æ–≤–æ—Ä —Å —Å—É–º–º–æ–π, –∞–∫—Ç, —É—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã –∏ –ø–µ—Ä–µ–¥–∞—á–∏\n"
            "‚Ä¢ –õ—É—á—à–µ —á–µ—Ä–µ–∑ —è—á–µ–π–∫—É, –∞–∫–∫—Ä–µ–¥–∏—Ç–∏–≤ –∏–ª–∏ —ç—Å–∫—Ä–æ—É\n\n"
            "üîπ <b>–ü–æ—Å–ª–µ —Å–¥–µ–ª–∫–∏:</b>\n"
            "‚Ä¢ –í—ã–ø–∏—Å–∫–∞ –∏–∑ –ï–ì–†–ù —Å –≤–∞–º–∏ –∫–∞–∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–º\n"
            "‚Ä¢ –ü–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ñ–ö–•, —Å—á—ë—Ç—á–∏–∫–∏"
        )
    rent_text = (
            "üìã <b>–ß–µ–∫-–ª–∏—Å—Ç –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã</b>\n\n"
            "üîπ <b>–ü—Ä–∏ –∑–≤–æ–Ω–∫–µ:</b>\n"
            "‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∏ –∞–¥—Ä–µ—Å\n"
            "‚Ä¢ –¶–µ–Ω–∞, –∫—Ç–æ –ø–ª–∞—Ç–∏—Ç –∫–æ–º–º—É–Ω–∞–ª–∫—É\n"
            "‚Ä¢ –ï—Å—Ç—å –ª–∏ –∑–∞–ª–æ–≥, –º–æ–∂–Ω–æ –ª–∏ —Å –¥–µ—Ç—å–º–∏/–∂–∏–≤–æ—Ç–Ω—ã–º–∏\n"
            "‚Ä¢ –ö–æ–≥–¥–∞ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É\n\n"
            "üîπ <b>–ü—Ä–∏ –æ—Å–º–æ—Ç—Ä–µ:</b>\n"
            "‚Ä¢ –ü–æ–¥—ä–µ–∑–¥: –∑–∞–ø–∞—Ö, –º—É—Å–æ—Ä, —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n"
            "‚Ä¢ –ö—Ä–∞–Ω—ã, —Ç–µ—Ö–Ω–∏–∫–∞, –º–µ–±–µ–ª—å, –ø–æ—Ç–æ–ª–æ–∫ ‚Äî –≤—Å—ë –ª–∏ –≤ –ø–æ—Ä—è–¥–∫–µ\n\n"
            "üîπ <b>–î–æ–∫—É–º–µ–Ω—Ç—ã:</b>\n"
            "‚Ä¢ –ü–∞—Å–ø–æ—Ä—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞, –≤—ã–ø–∏—Å–∫–∞ –∏–∑ –ï–ì–†–ù\n"
            "‚Ä¢ –î–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤\n"
            "‚Ä¢ –£ —Ä–∏–µ–ª—Ç–æ—Ä–∞ ‚Äî –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞\n\n"
            "üîπ <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>\n"
            "‚Ä¢ –î–µ–Ω—å–≥–∏ ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ –∏ –∞–∫—Ç–∞\n"
            "‚Ä¢ –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–ª–≥–∏ –∑–∞ –ñ–ö–£, –∫–≤–∞—Ä—Ç–∏—Ä—É –Ω–∞ —Å–∞–π—Ç–µ –§–°–°–ü"
        )
    def __init__(self):
        self.nlp_processor = HousingCriteriaExtractor()
        self.user_contexts = {}

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        welcome_text = (
            "üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∂–∏–ª—å—è!",
            "\n\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n",
            "‚Ä¢ '–ò—â—É 2-–∫–æ–º–Ω–∞—Ç–Ω—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É –≤ –ú–æ—Å–∫–≤–µ –¥–æ 10 –º–ª–Ω —Ä—É–±–ª–µ–π –ø–ª–æ—â–∞–¥—å—é 60 –º¬≤'",
            "\n–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —á–∞—Å—Ç—è–º–∏: —Å–Ω–∞—á–∞–ª–∞ –≥–æ—Ä–æ–¥, –ø–æ—Ç–æ–º —Ü–µ–Ω—É –∏ —Ç.–¥."
        )
        await update.message.reply_text("\n".join(welcome_text))

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        help_text = (
            "‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:",
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º",
            "/reset - –°–±—Ä–æ—Å–∏—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏",
            "/help - –ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç"
        )
        await update.message.reply_text("\n".join(help_text))

    async def reset(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.message.from_user.id
        self.user_contexts[user_id] = {}
        await update.message.reply_text("üîÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞.")

    async def sale(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(self.sale_text, parse_mode="HTML")
    
    async def rent(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(self.rent_text, parse_mode="HTML")


    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.message.from_user.id
        user_input = update.message.text

        try:
            prev_context = self.user_contexts.get(user_id, {})
            new_context = self.nlp_processor.extract_criteria(
                user_input, prev_context)
            self.user_contexts[user_id] = new_context

            if new_context.get("location") and not all([
                new_context.get("rooms"),
                new_context.get("price"),
                new_context.get("area")
            ]):
                summary_parts = []
                if new_context.get("location"):
                    summary_parts.append(
                        f"–ì–æ—Ä–æ–¥: {(new_context['location']).capitalize()}")
                if new_context.get("rooms"):
                    summary_parts.append(
                        f"–ö–æ–º–Ω–∞—Ç: {new_context['rooms'] if new_context['rooms'] != 0 else '–°—Ç—É–¥–∏—è'}")
                if new_context.get("price"):
                    summary_parts.append(
                        f"–ë—é–¥–∂–µ—Ç –¥–æ: {new_context['price']:,} ‚ÇΩ")
                if new_context.get("area"):
                    summary_parts.append(
                        f"–ü–ª–æ—â–∞–¥—å –¥–æ: {new_context['area']} –º¬≤")
                if new_context.get("deal"):
                    summary_parts.append(
                        f"–¢–∏–ø: {'–ê—Ä–µ–Ω–¥–∞' if new_context['deal'] == 'rent' else '–ü–æ–∫—É–ø–∫–∞'}"
                    )

                if summary_parts:
                    summary_text = "üìã –¢–µ–∫—É—â–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞:\n" + \
                        "\n".join(summary_parts)
                    await update.message.reply_text(summary_text)

                keyboard = [
                    [
                        InlineKeyboardButton(
                            "üîç –ù–∞–π—Ç–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏",
                            callback_data="search_now"
                        )
                    ]
                ]
                await update.message.reply_text(
                    "–£—Å—Ç—Ä–∞–∏–≤–∞—é—Ç –ª–∏ –≤–∞—Å —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë?",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return

            await self._send_flats(update, new_context)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–∞—á–µ."
            )

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id

        if query.data == "search_now":
            criteria = self.user_contexts.get(user_id, {})
            await self._send_flats(query, criteria)
            self.user_contexts[user_id] = {}

    async def _send_flats(self, target, criteria: dict):
        summary_parts = []
        if criteria.get("location"):
            summary_parts.append(f"–ì–æ—Ä–æ–¥: {criteria['location']}")
        if criteria.get("rooms"):
            summary_parts.append(f"–ö–æ–º–Ω–∞—Ç: {criteria['rooms']}")
        if criteria.get("price"):
            summary_parts.append(f"–ë—é–¥–∂–µ—Ç –¥–æ: {criteria['price']:,} ‚ÇΩ")
        if criteria.get("area"):
            summary_parts.append(f"–ü–ª–æ—â–∞–¥—å –¥–æ: {criteria['area']} –º¬≤")
        if criteria.get("deal"):
            summary_parts.append(
                f"–¢–∏–ø: {'–ê—Ä–µ–Ω–¥–∞' if criteria['deal'] == 'rent' else '–ü–æ–∫—É–ø–∫–∞'}"
            )

        if summary_parts:
            summary_text = "üìã –¢–µ–∫—É—â–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞:\n" + \
                "\n".join(summary_parts)
            await target.message.reply_text(summary_text)

        location = criteria.get("location")
        if not location:
            await target.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –≥–æ—Ä–æ–¥.")
            return

        rooms = criteria.get("rooms")
        price = criteria.get("price")
        area = criteria.get("area")
        deal = criteria.get("deal") or "sale"

        flats = find_flats(rooms, price, area, location, deal=deal)
        valid_flats = [f for f in flats if isinstance(f, dict)]

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä
        for flat in valid_flats:
            photo = flat["photo_url"]
            caption = flat["caption"]
            safe_caption = caption[:1020] + \
                "‚Ä¶" if len(caption) > 1024 else caption
            if photo:
                await target.message.reply_photo(photo=photo, caption=safe_caption)
            else:
                await target.message.reply_text(safe_caption)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç—ã –ø–æ—Å–ª–µ –∫–≤–∞—Ä—Ç–∏—Ä
        coords = []
        for i, flat in enumerate(valid_flats):
            lat = flat.get("lat")
            lon = flat.get("lon")
            if lat and lon:
                coords.append(f"{lon},{lat},pm2rdl{i+1}")

        if coords:
            points = "~".join(coords)
            map_url = f"https://static-maps.yandex.ru/1.x/?l=map&pt={points}"
            caption = f"üó∫ –ö–∞—Ä—Ç–∞ —Å {len(coords)} –∫–≤–∞—Ä—Ç–∏—Ä{'–æ–π' if len(coords) == 1 else '–∞–º–∏'}"
            await target.message.reply_photo(photo=map_url, caption=caption)

        # –°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = target.message.from_user.id if hasattr(
            target, "message") else target.from_user.id
        self.user_contexts[user_id] = {}


def main():
    bot = HousingBot()
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", bot.start))
    app.add_handler(CommandHandler("reset", bot.reset))
    app.add_handler(CommandHandler("help", bot.help))
    app.add_handler(CommandHandler("sale", bot.sale))
    app.add_handler(CommandHandler("rent", bot.rent))
    app.add_handler(CallbackQueryHandler(bot.handle_callback))
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, bot.handle_message))

    logging.info("----------------------- –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω -----------------------")
    app.run_polling()


if __name__ == "__main__":
    main()