from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes
)
from config import TELEGRAM_TOKEN
from nlp_processor import HousingCriteriaExtractor
import logging
import sys
import os
import aiohttp  # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Yandex API

# –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from services.url import find_flats

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class HousingBot:
    SALE_TEXT = (
        "üìã <b>–ß–µ–∫-–ª–∏—Å—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∫–≤–∞—Ä—Ç–∏—Ä—ã</b>\n\n"
        "üîπ <b>–î–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:</b>\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –æ–Ω–ª–∞–π–Ω, —Å—Ä–∞–≤–Ω–∏—Ç—å —Å –ø–æ—Ö–æ–∂–∏–º–∏\n"
        "‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞, —Ç–∏–ø —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏, —Ç–æ—Ä–≥\n\n"
        "üîπ <b>–ù–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ:</b>\n"
        "‚Ä¢ –û—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—ä–µ–∑–¥, –¥–æ–º, –¥–≤–æ—Ä\n"
        "‚Ä¢ –í–Ω—É—Ç—Ä–∏ ‚Äî —Ç–µ—Ö–Ω–∏–∫–∞, –º–µ–±–µ–ª—å, –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã\n"
        "‚Ä¢ –£–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –ø—Ä–æ–¥–∞–∂–∏\n\n"
        "üîπ <b>–î–æ–∫—É–º–µ–Ω—Ç—ã:</b>\n"
        "‚Ä¢ –í—ã–ø–∏—Å–∫–∞ –∏–∑ –ï–ì–†–ù, –ø–∞—Å–ø–æ—Ä—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞\n"
        "‚Ä¢ –û—Å–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ (–î–ö–ü, –¥–∞—Ä–µ–Ω–∏–µ...)\n"
        "‚Ä¢ –°–æ–≥–ª–∞—Å–∏–µ —Å—É–ø—Ä—É–≥–∞, –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ\n\n"
        "üîπ <b>–ù–∞ —Å–¥–µ–ª–∫–µ:</b>\n"
        "‚Ä¢ –î–æ–≥–æ–≤–æ—Ä —Å —Å—É–º–º–æ–π, –∞–∫—Ç, —É—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã –∏ –ø–µ—Ä–µ–¥–∞—á–∏\n"
        "‚Ä¢ –õ—É—á—à–µ —á–µ—Ä–µ–∑ —è—á–µ–π–∫—É, –∞–∫–∫—Ä–µ–¥–∏—Ç–∏–≤ –∏–ª–∏ —ç—Å–∫—Ä–æ—É\n\n"
        "üîπ <b>–ü–æ—Å–ª–µ —Å–¥–µ–ª–∫–∏:</b>\n"
        "‚Ä¢ –í—ã–ø–∏—Å–∫–∞ –∏–∑ –ï–ì–†–ù —Å –≤–∞–º–∏ –∫–∞–∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–º\n"
        "‚Ä¢ –ü–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ñ–ö–•, —Å—á—ë—Ç—á–∏–∫–∏"
    )

    RENT_TEXT = (
        "üìã <b>–ß–µ–∫-–ª–∏—Å—Ç –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã</b>\n\n"
        "üîπ <b>–ü—Ä–∏ –∑–≤–æ–Ω–∫–µ:</b>\n"
        "‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∏ –∞–¥—Ä–µ—Å\n"
        "‚Ä¢ –¶–µ–Ω–∞, –∫—Ç–æ –ø–ª–∞—Ç–∏—Ç –∫–æ–º–º—É–Ω–∞–ª–∫—É\n"
        "‚Ä¢ –ï—Å—Ç—å –ª–∏ –∑–∞–ª–æ–≥, –º–æ–∂–Ω–æ –ª–∏ —Å –¥–µ—Ç—å–º–∏/–∂–∏–≤–æ—Ç–Ω—ã–º–∏\n"
        "‚Ä¢ –ö–æ–≥–¥–∞ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É\n\n"
        "üîπ <b>–ü—Ä–∏ –æ—Å–º–æ—Ç—Ä–µ:</b>\n"
        "‚Ä¢ –ü–æ–¥—ä–µ–∑–¥: –∑–∞–ø–∞—Ö, –º—É—Å–æ—Ä, —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n"
        "‚Ä¢ –ö—Ä–∞–Ω—ã, —Ç–µ—Ö–Ω–∏–∫–∞, –º–µ–±–µ–ª—å, –ø–æ—Ç–æ–ª–æ–∫ ‚Äî –≤—Å—ë –ª–∏ –≤ –ø–æ—Ä—è–¥–∫–µ\n\n"
        "üîπ <b>–î–æ–∫—É–º–µ–Ω—Ç—ã:</b>\n"
        "‚Ä¢ –ü–∞—Å–ø–æ—Ä—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞, –≤—ã–ø–∏—Å–∫–∞ –∏–∑ –ï–ì–†–ù\n"
        "‚Ä¢ –î–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤\n"
        "‚Ä¢ –£ —Ä–∏–µ–ª—Ç–æ—Ä–∞ ‚Äî –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞\n\n"
        "üîπ <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>\n"
        "‚Ä¢ –î–µ–Ω—å–≥–∏ ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ –∏ –∞–∫—Ç–∞\n"
        "‚Ä¢ –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–ª–≥–∏ –∑–∞ –ñ–ö–£, –∫–≤–∞—Ä—Ç–∏—Ä—É –Ω–∞ —Å–∞–π—Ç–µ –§–°–°–ü"
    )

    DEAL = ""

    def __init__(self):
        self.nlp_processor = HousingCriteriaExtractor()
        self.user_contexts = {}
        self.yandex_api_key = "cb7b3954-781a-4f71-bcd7-57248fcb586b"

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        welcome_text = (
            "üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∂–∏–ª—å—è!\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ '–ò—â—É 2-–∫–æ–º–Ω–∞—Ç–Ω—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É –≤ –ú–æ—Å–∫–≤–µ –¥–æ 10 –º–ª–Ω —Ä—É–±–ª–µ–π –ø–ª–æ—â–∞–¥—å—é 60 –º¬≤'"
        )
        await update.message.reply_text(welcome_text)

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        help_text = (
            "‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/reset - –°–±—Ä–æ—Å–∏—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏\n"
            "/help - –ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç\n"
            "/sale - –ß–µ–∫-–ª–∏—Å—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è\n"
            "/rent - –ß–µ–∫-–ª–∏—Å—Ç –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞\n"
            "/lastresults - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
        )
        await update.message.reply_text(help_text)

    async def reset(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user_id = update.message.from_user.id
        self.user_contexts[user_id] = {}
        await update.message.reply_text("üîÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞.")

    async def sale(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        await update.message.reply_text(self.SALE_TEXT, parse_mode="HTML")

    async def rent(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        await update.message.reply_text(self.RENT_TEXT, parse_mode="HTML")

    async def last_results(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user_id = update.message.from_user.id
        user_context = self.user_contexts.get(user_id, {})
        flats = user_context.get("flats", [])

        logger.info(f"Last results requested by user {user_id}. Context: {user_context}")

        if not flats:
            await update.message.reply_text("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
            return

        for flat in flats:
            caption = flat.get("caption", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
            safe_caption = caption[:1020] + "‚Ä¶" if len(caption) > 1024 else caption
            try:
                if flat.get("photo_url"):
                    await update.message.reply_photo(photo=flat["photo_url"], caption=safe_caption)
                else:
                    await update.message.reply_text(safe_caption)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
                await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user_id = update.message.from_user.id
        user_input = update.message.text.strip()

        try:
            prev_context = self.user_contexts.get(user_id, {})
            new_context = self.nlp_processor.extract_criteria(user_input, prev_context)
            new_context["flats"] = prev_context.get("flats", [])
            self.user_contexts[user_id] = new_context

            logger.info(f"Updated context for user {user_id}: {new_context}")

            if new_context.get("location") and not all([
                new_context.get("rooms"),
                new_context.get("price"),
                new_context.get("area")
            ]):
                summary = self._build_criteria_summary(new_context)
                if summary:
                    await update.message.reply_text(summary)
                    keyboard = [[InlineKeyboardButton(
                        "üîç –ù–∞–π—Ç–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏", callback_data="search_now")]]
                    await update.message.reply_text(
                        "–£—Å—Ç—Ä–∞–∏–≤–∞—é—Ç –ª–∏ –≤–∞—Å —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë?",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                return

            await self._send_flats(update, new_context)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_id}: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    def _build_criteria_summary(self, criteria: dict) -> str:
        parts = []
        if criteria.get("location"):
            parts.append(f"–ì–æ—Ä–æ–¥: {criteria['location'].capitalize()}")
        if criteria.get("rooms"):
            parts.append(f"–ö–æ–º–Ω–∞—Ç: {criteria['rooms'] if criteria['rooms'] != 0 else '–°—Ç—É–¥–∏—è'}")
        if criteria.get("price"):
            parts.append(f"–ë—é–¥–∂–µ—Ç –¥–æ: {criteria['price']:,} ‚ÇΩ")
        if criteria.get("area"):
            parts.append(f"–ü–ª–æ—â–∞–¥—å –¥–æ: {criteria['area']} –º¬≤")
        if criteria.get("deal"):
            self.DEAL = criteria['deal']
            parts.append(f"–¢–∏–ø: {'–ê—Ä–µ–Ω–¥–∞' if criteria['deal'] == 'rent' else '–ü–æ–∫—É–ø–∫–∞'}")
        return "üìã –¢–µ–∫—É—â–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞:\n" + "\n".join(parts) if parts else ""

    async def _get_nearby_infrastructure(self, lon: float, lat: float) -> str:
        categories = ["–º–∞–≥–∞–∑–∏–Ω", "–±–æ–ª—å–Ω–∏—Ü–∞", "—à–∫–æ–ª–∞"]
        nearby = []
        
        for category in categories:
            url = (
                f"https://search-maps.yandex.ru/v1/?text={category}&ll={lon},{lat}"
                f"&spn=0.01,0.01&lang=ru_RU&apikey={self.yandex_api_key}"
            )
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.get(url) as response:
                        if response.status == 200:
                            data = await response.json()
                            features = data.get("features", [])
                            if features:
                                # –ë–µ—Ä–µ–º –±–ª–∏–∂–∞–π—à–∏–π –æ–±—ä–µ–∫—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                                feature = features[0]
                                name = feature["properties"].get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                                desc = feature["properties"].get("description", "")
                                nearby.append(f"‚Ä¢ {category.capitalize()}: {name} ({desc})")
                        else:
                            logger.error(f"Yandex API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –¥–ª—è {category}: {response.status}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Yandex API –¥–ª—è {category}: {e}")

        if not nearby:
            return "üè¨ –ë–ª–∏–∂–∞–π—à–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        return "üè¨ –ë–ª–∏–∂–∞–π—à–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞:\n" + "\n".join(nearby)

    async def _send_flats(self, target, criteria: dict) -> None:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ user_id
        if isinstance(target, Update):  # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            user_id = target.message.from_user.id
            reply_method = target.message.reply_text
        else:  # CallbackQuery
            user_id = target.from_user.id
            reply_method = target.message.reply_text

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
        current_context = self.user_contexts.get(user_id, {}).copy()
        current_context.update(criteria)
        
        logger.info(f"Sending flats for user {user_id}. Criteria: {criteria}")

        if not criteria.get("location"):
            await reply_method("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –≥–æ—Ä–æ–¥.")
            return

        try:
            flats = find_flats(
                criteria.get("rooms"),
                criteria.get("price"),
                criteria.get("area"),
                criteria["location"],
                deal=criteria.get("deal", "sale")
            )
            valid_flats = [f for f in flats if isinstance(f, dict)]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            current_context["flats"] = valid_flats
            self.user_contexts[user_id] = current_context
            logger.info(f"Context updated with flats for user {user_id}: {self.user_contexts[user_id]}")

            if not valid_flats:
                await reply_method("üîç –ü–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            for flat in valid_flats:
                caption = flat.get("caption", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
                safe_caption = caption[:1020] + "‚Ä¶" if len(caption) > 1024 else caption
                try:
                    if flat.get("photo_url"):
                        await target.message.reply_photo(photo=flat["photo_url"], caption=safe_caption)
                    else:
                        await target.message.reply_text(safe_caption)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã: {e}")

            await self._send_map(target, valid_flats)
            await self._send_flat_selection_keyboard(target, valid_flats)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _send_flats –¥–ª—è user {user_id}: {e}", exc_info=True)
            await reply_method("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–≤–∞—Ä—Ç–∏—Ä.")

    async def _send_map(self, target, flats: list) -> None:
        coords = [f"{flat['lon']},{flat['lat']},pm2rdl{i+1}" 
                 for i, flat in enumerate(flats) 
                 if flat.get("lat") and flat.get("lon")]
        if coords:
            points = "~".join(coords)
            map_url = f"https://static-maps.yandex.ru/1.x/?l=map&pt={points}"
            caption = f"üó∫ –ö–∞—Ä—Ç–∞ —Å {len(coords)} –∫–≤–∞—Ä—Ç–∏—Ä{'–æ–π' if len(coords) == 1 else '–∞–º–∏'}"
            try:
                await target.message.reply_photo(photo=map_url, caption=caption)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç—ã: {e}")

    async def _send_flat_selection_keyboard(self, target, flats: list) -> None:
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton(f"{i+1}", callback_data=f"flat_{i}")
            for i in range(len(flats))
        ]])
        await target.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:", reply_markup=keyboard)

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        user_context = self.user_contexts.get(user_id, {})

        logger.info(f"Callback received for user {user_id}. Context: {user_context}")

        try:
            if query.data == "search_now":
                await self._send_flats(query, user_context)
            elif query.data.startswith("flat_"):
                idx = int(query.data.split("_")[1])
                flats = user_context.get("flats", [])
                if 0 <= idx < len(flats):
                    flat = flats[idx]
                    details = flat.get("details") or flat.get("caption", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                    infra = await self._get_nearby_infrastructure(flat["lon"], flat["lat"])
                    full_details = f"{details}\n\n{infra}\n\n{self.RENT_TEXT if self.DEAL == 'rent' else self.SALE_TEXT}"
                    await query.message.reply_text(f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n{full_details}", parse_mode="HTML")
                else:
                    await query.message.reply_text("‚ö†Ô∏è –ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ callback –¥–ª—è {user_id}: {e}", exc_info=True)
            await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

def main() -> None:
    try:
        bot = HousingBot()
        app = Application.builder().token(TELEGRAM_TOKEN).build()

        handlers = [
            CommandHandler("start", bot.start),
            CommandHandler("reset", bot.reset),
            CommandHandler("help", bot.help),
            CommandHandler("sale", bot.sale),
            CommandHandler("rent", bot.rent),
            CommandHandler("lastresults", bot.last_results),
            CallbackQueryHandler(bot.handle_callback),
            MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message)
        ]

        for handler in handlers:
            app.add_handler(handler)

        logger.info("----------------------- –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω -----------------------")
        app.run_polling()
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)

if __name__ == "__main__":
    main()