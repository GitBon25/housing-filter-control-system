from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes
)
from config import TELEGRAM_TOKEN
from nlp_processor import HousingCriteriaExtractor
import logging, sys, os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from services.url import find_flats

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

class HousingBot:
    def __init__(self):
        self.nlp_processor = HousingCriteriaExtractor()
        self.user_contexts = {}

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        welcome_text = (
            "üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∂–∏–ª—å—è!",
            "\n\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n",
            "‚Ä¢ '–ò—â—É 2-–∫–æ–º–Ω–∞—Ç–Ω—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É –≤ –ú–æ—Å–∫–≤–µ –¥–æ 10 –º–ª–Ω —Ä—É–±–ª–µ–π –ø–ª–æ—â–∞–¥—å—é 60 –º¬≤'",
            "\n–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —á–∞—Å—Ç—è–º–∏: —Å–Ω–∞—á–∞–ª–∞ –≥–æ—Ä–æ–¥, –ø–æ—Ç–æ–º —Ü–µ–Ω—É –∏ —Ç.–¥."
        )
        await update.message.reply_text("\n".join(welcome_text))

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        help_text = (
            "‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:",
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º",
            "/reset - –°–±—Ä–æ—Å–∏—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏",
            "/help - –ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç"
        )
        await update.message.reply_text("\n".join(help_text))

    async def reset(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.message.from_user.id
        self.user_contexts[user_id] = {}
        await update.message.reply_text("üîÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞.")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.message.from_user.id
        user_input = update.message.text

        try:
            prev_context = self.user_contexts.get(user_id, {})
            new_context = self.nlp_processor.extract_criteria(user_input, prev_context)
            self.user_contexts[user_id] = new_context

            if new_context.get("location") and not all([
                new_context.get("rooms"),
                new_context.get("price"),
                new_context.get("area")
            ]):
                summary_parts = []
                if new_context.get("location"):
                    summary_parts.append(f"–ì–æ—Ä–æ–¥: {new_context['location']}")
                if new_context.get("rooms"):
                    summary_parts.append(f"–ö–æ–º–Ω–∞—Ç: {new_context['rooms'] if new_context['rooms'] != 0 else '–°—Ç—É–¥–∏—è'}")
                if new_context.get("price"):
                    summary_parts.append(f"–ë—é–¥–∂–µ—Ç –¥–æ: {new_context['price']:,} ‚ÇΩ")
                if new_context.get("area"):
                    summary_parts.append(f"–ü–ª–æ—â–∞–¥—å –¥–æ: {new_context['area']} –º¬≤")
                if new_context.get("deal"):
                    summary_parts.append(
                        f"–¢–∏–ø: {'–ê—Ä–µ–Ω–¥–∞' if new_context['deal'] == 'rent' else '–ü–æ–∫—É–ø–∫–∞'}"
                    )

                if summary_parts:
                    summary_text = "üìã –¢–µ–∫—É—â–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞:\n" + "\n".join(summary_parts)
                    await update.message.reply_text(summary_text)

                keyboard = [
                    [
                        InlineKeyboardButton(
                            "üîç –ù–∞–π—Ç–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏",
                            callback_data="search_now"
                        )
                    ]
                ]
                await update.message.reply_text(
                    "–£—Å—Ç—Ä–∞–∏–≤–∞—é—Ç –ª–∏ –≤–∞—Å —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë?",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return

            await self._send_flats(update, new_context)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–∞—á–µ."
            )

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id

        if query.data == "search_now":
            criteria = self.user_contexts.get(user_id, {})
            await self._send_flats(query, criteria)

    async def _send_flats(self, target, criteria: dict):
        summary_parts = []
        if criteria.get("location"):
            summary_parts.append(f"–ì–æ—Ä–æ–¥: {criteria['location']}")
        if criteria.get("rooms"):
            summary_parts.append(f"–ö–æ–º–Ω–∞—Ç: {criteria['rooms']}")
        if criteria.get("price"):
            summary_parts.append(f"–ë—é–¥–∂–µ—Ç –¥–æ: {criteria['price']:,} ‚ÇΩ")
        if criteria.get("area"):
            summary_parts.append(f"–ü–ª–æ—â–∞–¥—å –¥–æ: {criteria['area']} –º¬≤")
        if criteria.get("deal"):
            summary_parts.append(
                f"–¢–∏–ø: {'–ê—Ä–µ–Ω–¥–∞' if criteria['deal'] == 'rent' else '–ü–æ–∫—É–ø–∫–∞'}"
            )

        if summary_parts:
            summary_text = "üìã –¢–µ–∫—É—â–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞:\n" + "\n".join(summary_parts)
            await target.message.reply_text(summary_text)

        location = criteria.get("location")
        if not location:
            await target.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –≥–æ—Ä–æ–¥.")
            return

        rooms = criteria.get("rooms")
        price = criteria.get("price")
        area = criteria.get("area")
        deal = criteria.get("deal") or "sale"

        flats = find_flats(rooms, price, area, location, deal=deal)

        if isinstance(flats, list) and flats and isinstance(flats[0], dict):
            for flat in flats:
                photo = flat["photo_url"]
                caption = flat["caption"]
                safe_caption = caption[:1020] + "‚Ä¶" if len(caption) > 1024 else caption
                if photo:
                    await target.message.reply_photo(photo=photo, caption=safe_caption)
                else:
                    await target.message.reply_text(safe_caption)
        else:
            for msg in flats:
                await target.message.reply_text(msg)
        
        user_id = target.message.from_user.id if hasattr(target, "message") else target.from_user.id
        self.user_contexts[user_id] = {}


def main():
    bot = HousingBot()
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", bot.start))
    app.add_handler(CommandHandler("reset", bot.reset))
    app.add_handler(CommandHandler("help", bot.help))
    app.add_handler(CallbackQueryHandler(bot.handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))

    logging.info("----------------------- –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω -----------------------")
    app.run_polling()


if __name__ == "__main__":
    main()
