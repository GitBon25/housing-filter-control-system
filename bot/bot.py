from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes
)
from config import TELEGRAM_TOKEN
from nlp_processor import HousingCriteriaExtractor
import logging, sys, os, requests, ffmpeg
import speech_recognition as sr

# –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from services.url import find_flats


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class HousingBot:
    SALE_TEXT = (
        "üìã <b>–ß–µ–∫-–ª–∏—Å—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∫–≤–∞—Ä—Ç–∏—Ä—ã</b>\n\n"
        "üîπ <b>–î–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:</b>\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –æ–Ω–ª–∞–π–Ω, —Å—Ä–∞–≤–Ω–∏—Ç—å —Å –ø–æ—Ö–æ–∂–∏–º–∏\n"
        "‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞, —Ç–∏–ø —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏, —Ç–æ—Ä–≥\n\n"
        "üîπ <b>–ù–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ:</b>\n"
        "‚Ä¢ –û—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—ä–µ–∑–¥, –¥–æ–º, –¥–≤–æ—Ä\n"
        "‚Ä¢ –í–Ω—É—Ç—Ä–∏ ‚Äî —Ç–µ—Ö–Ω–∏–∫–∞, –º–µ–±–µ–ª—å, –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã\n"
        "‚Ä¢ –£–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –ø—Ä–æ–¥–∞–∂–∏\n\n"
        "üîπ <b>–î–æ–∫—É–º–µ–Ω—Ç—ã:</b>\n"
        "‚Ä¢ –í—ã–ø–∏—Å–∫–∞ –∏–∑ –ï–ì–†–ù, –ø–∞—Å–ø–æ—Ä—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞\n"
        "‚Ä¢ –û—Å–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ (–î–ö–ü, –¥–∞—Ä–µ–Ω–∏–µ...)\n"
        "‚Ä¢ –°–æ–≥–ª–∞—Å–∏–µ —Å—É–ø—Ä—É–≥–∞, –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ\n\n"
        "üîπ <b>–ù–∞ —Å–¥–µ–ª–∫–µ:</b>\n"
        "‚Ä¢ –î–æ–≥–æ–≤–æ—Ä —Å —Å—É–º–º–æ–π, –∞–∫—Ç, —É—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã –∏ –ø–µ—Ä–µ–¥–∞—á–∏\n"
        "‚Ä¢ –õ—É—á—à–µ —á–µ—Ä–µ–∑ —è—á–µ–π–∫—É, –∞–∫–∫—Ä–µ–¥–∏—Ç–∏–≤ –∏–ª–∏ —ç—Å–∫—Ä–æ—É\n\n"
        "üîπ <b>–ü–æ—Å–ª–µ —Å–¥–µ–ª–∫–∏:</b>\n"
        "‚Ä¢ –í—ã–ø–∏—Å–∫–∞ –∏–∑ –ï–ì–†–ù —Å –≤–∞–º–∏ –∫–∞–∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–º\n"
        "‚Ä¢ –ü–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ñ–ö–•, —Å—á—ë—Ç—á–∏–∫–∏"
    )

    RENT_TEXT = (
        "üìã <b>–ß–µ–∫-–ª–∏—Å—Ç –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã</b>\n\n"
        "üîπ <b>–ü—Ä–∏ –∑–≤–æ–Ω–∫–µ:</b>\n"
        "‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∏ –∞–¥—Ä–µ—Å\n"
        "‚Ä¢ –¶–µ–Ω–∞, –∫—Ç–æ –ø–ª–∞—Ç–∏—Ç –∫–æ–º–º—É–Ω–∞–ª–∫—É\n"
        "‚Ä¢ –ï—Å—Ç—å –ª–∏ –∑–∞–ª–æ–≥, –º–æ–∂–Ω–æ –ª–∏ —Å –¥–µ—Ç—å–º–∏/–∂–∏–≤–æ—Ç–Ω—ã–º–∏\n"
        "‚Ä¢ –ö–æ–≥–¥–∞ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É\n\n"
        "üîπ <b>–ü—Ä–∏ –æ—Å–º–æ—Ç—Ä–µ:</b>\n"
        "‚Ä¢ –ü–æ–¥—ä–µ–∑–¥: –∑–∞–ø–∞—Ö, –º—É—Å–æ—Ä, —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n"
        "‚Ä¢ –ö—Ä–∞–Ω—ã, —Ç–µ—Ö–Ω–∏–∫–∞, –º–µ–±–µ–ª—å, –ø–æ—Ç–æ–ª–æ–∫ ‚Äî –≤—Å—ë –ª–∏ –≤ –ø–æ—Ä—è–¥–∫–µ\n\n"
        "üîπ <b>–î–æ–∫—É–º–µ–Ω—Ç—ã:</b>\n"
        "‚Ä¢ –ü–∞—Å–ø–æ—Ä—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞, –≤—ã–ø–∏—Å–∫–∞ –∏–∑ –ï–ì–†–ù\n"
        "‚Ä¢ –î–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤\n"
        "‚Ä¢ –£ —Ä–∏–µ–ª—Ç–æ—Ä–∞ ‚Äî –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞\n\n"
        "üîπ <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>\n"
        "‚Ä¢ –î–µ–Ω—å–≥–∏ ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ –∏ –∞–∫—Ç–∞\n"
        "‚Ä¢ –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–ª–≥–∏ –∑–∞ –ñ–ö–£, –∫–≤–∞—Ä—Ç–∏—Ä—É –Ω–∞ —Å–∞–π—Ç–µ –§–°–°–ü"
    )

    def __init__(self):
        self.nlp_processor = HousingCriteriaExtractor()
        self.user_contexts = {}
        self.recognizer = sr.Recognizer()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        welcome_text = (
            "=== –í–•–û–î–Ø–©–ï–ï –°–û–û–ë–©–ï–ù–ò–ï –û–î–û–ë–†–ï–ù–û ===\n"
            "–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω.\n\n"
            "–í–∞—à–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –°–∏—Å—Ç–µ–º–µ –ñ–∏–ª–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ.\n"
            "–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –∂–∏–ª–ø–ª–æ—â–∞–¥–∏ —É–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —É—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "- –¢–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n"
            "- –ì–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–±—É–¥–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∞–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)\n\n"
            "–ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:\n"
            "‚Ä¢ –ú–Ω–µ –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å 3-–∫–æ–º–Ω–∞—Ç–Ω—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ –¥–æ 10 –º–ª–Ω —Ä—É–±–ª–µ–π.\n"
            "‚Ä¢ –°–Ω—è—Ç—å 1-–∫–æ–º–Ω–∞—Ç–Ω—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É –≤ –ú–æ—Å–∫–≤–µ –¥–æ 30 —Ç—ã—Å —Ä—É–±–ª–µ–π, 30 –º–µ—Ç—Ä–æ–≤.\n\n"
            "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∏—Å–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –ø–æ–∫—É–ø–∫—É. –£–∫–∞–∂–∏—Ç–µ '–∞—Ä–µ–Ω–¥–∞' –∏–ª–∏ '—Å–Ω—è—Ç—å', –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞—Ä–µ–Ω–¥–∞.\n"
            "–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∏—Ä–∞–≤–Ω–∏–≤–∞—é—Ç—Å—è –∫ —Å–∞–±–æ—Ç–∞–∂—É.\n"
            "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –ë–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–ª–µ–¥–∏—Ç –∑–∞ –≤–∞—à–µ–π –ª–æ—è–ª—å–Ω–æ—Å—Ç—å—é.\n"
            "=== –°–û–û–ë–©–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ==="
        )
        await update.message.reply_text(welcome_text)

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        help_text = (
            "=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –£–¢–í–ï–†–ñ–î–ï–ù–ê ===\n"
            "–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω.\n\n"
            "–í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –¥–∏—Ä–µ–∫—Ç–∏–≤–∞–º –°–∏—Å—Ç–µ–º—ã –ñ–∏–ª–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:\n"
            "‚Ä¢ /start ‚Äî –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∂–∏–ª–ø–ª–æ—â–∞–¥–∏\n"
            "‚Ä¢ /reset ‚Äî –û–±–Ω—É–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–ø–æ –ø—Ä–∏–∫–∞–∑—É –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞)\n"
            "‚Ä¢ /help ‚Äî –ü–µ—Ä–µ—á–µ–Ω—å —É—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n"
            "‚Ä¢ /sale ‚Äî –ß–µ–∫-–ª–∏—Å—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (—É—Ç–≤–µ—Ä–∂–¥—ë–Ω –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ–º –ò–∑–æ–±–∏–ª–∏—è)\n"
            "‚Ä¢ /rent ‚Äî –ß–µ–∫-–ª–∏—Å—Ç –¥–ª—è –∞—Ä–µ–Ω–¥—ã (—É—Ç–≤–µ—Ä–∂–¥—ë–Ω –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ–º –ë–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏—è)\n"
            "‚Ä¢ /lastresults ‚Äî –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–∞\n\n"
            "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∏—Å–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –ø–æ–∫—É–ø–∫—É. –£–∫–∞–∂–∏—Ç–µ '–∞—Ä–µ–Ω–¥–∞' –∏–ª–∏ '—Å–Ω—è—Ç—å' –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—Ä–µ–Ω–¥—ã.\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
            "–õ—é–±–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –¥–∏—Ä–µ–∫—Ç–∏–≤ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è.\n"
            "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –ü—Ä–∞–≤–¥—ã –Ω–∞–±–ª—é–¥–∞–µ—Ç.\n"
            "=== –ö–û–ù–ï–¶ –ü–ï–†–ï–î–ê–ß–ò ==="
        )
        await update.message.reply_text(help_text)

    async def reset(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user_id = update.message.from_user.id
        self.user_contexts[user_id] = {}
        reset_text = (
            "=== –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –û–î–û–ë–†–ï–ù–ê ===\n"
            "–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω.\n\n"
            "–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –ø—Ä–∏–∫–∞–∑—É –°–∏—Å—Ç–µ–º—ã.\n"
            "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n\n"
            "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –ë–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤–∞—à—É –ª–æ—è–ª—å–Ω–æ—Å—Ç—å.\n"
            "=== –û–ü–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê ==="
        )
        await update.message.reply_text(reset_text)

    async def sale(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        await update.message.reply_text(self.SALE_TEXT, parse_mode="HTML")

    async def rent(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        await update.message.reply_text(self.RENT_TEXT, parse_mode="HTML")

    async def last_results(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user_id = update.message.from_user.id
        user_context = self.user_contexts.get(user_id, {})
        flats = user_context.get("flats", [])

        logger.info(
            f"Last results requested by user {user_id}. Context: {user_context}")

        if not flats:
            no_results_text = (
                "=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê: –ù–£–õ–ï–í–´–ï ===\n"
                "–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω.\n\n"
                "–í–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–∞–Ω–Ω—ã—Ö.\n"
                "–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞—Å—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è –∫–∞–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–µ.\n\n"
                "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –ü—Ä–∞–≤–¥—ã –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç:\n"
                "\"–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ‚Äî –≤–∞—à–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å.\"\n"
                "=== –°–û–ï–î–ò–ù–ï–ù–ò–ï –ü–†–ï–†–í–ê–ù–û ==="
            )
            await update.message.reply_text(no_results_text)
            return

        for flat in flats:
            caption = flat.get("caption", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
            safe_caption = caption[:1020] + \
                "‚Ä¶" if len(caption) > 1024 else caption
            flat_text = (
                "=== –û–ë–™–ï–ö–¢ –ù–ê–ô–î–ï–ù ===\n\n"
                f"üè¢ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ (–æ–¥–æ–±—Ä–µ–Ω–æ –ñ–∏–ª–ü—Ä–∞–≤–¥–æ–π):\n{safe_caption}\n\n"
                "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:\n–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –≤–Ω–µ –°–∏—Å—Ç–µ–º—ã –∑–∞–ø—Ä–µ—â—ë–Ω.\n\n"
                "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –ë–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ.\n"
                "=== –ö–û–ù–ï–¶ –ü–ï–†–ï–î–ê–ß–ò ==="
            )
            try:
                if flat.get("photo_url"):
                    await update.message.reply_photo(photo=flat["photo_url"], caption=flat_text)
                else:
                    await update.message.reply_text(flat_text)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
                await update.message.reply_text(
                    "=== –°–ò–°–¢–ï–ú–ù–´–ô –°–ë–û–ô ===\n"
                    "–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω.\n\n"
                    "–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º.\n\n"
                    "–í–∞—à–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.\n"
                    "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –ü—Ä–∞–≤–¥—ã –Ω–∞–±–ª—é–¥–∞–µ—Ç.\n"
                    "=== –°–û–ï–î–ò–ù–ï–ù–ò–ï –ü–†–ï–†–í–ê–ù–û ==="
                )

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user_id = update.message.from_user.id

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if update.message.text:
            user_input = update.message.text.strip()
            await self._process_text_input(update, user_id, user_input)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif update.message.voice:
            await update.message.reply_text(
                "=== –û–ë–†–ê–ë–û–¢–ö–ê –ì–û–õ–û–°–û–í–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø ===\n"
                "–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω.\n\n"
                "–í–∞—à –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.",
                parse_mode=None
            )
            try:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
                file = await update.message.voice.get_file()
                file_url = file.file_path
                audio_data = requests.get(file_url).content

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π OGG
                with open("temp_voice.ogg", "wb") as f:
                    f.write(audio_data)

                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è OGG ‚Üí WAV —á–µ—Ä–µ–∑ ffmpeg-python
                ffmpeg_path = "C:\\ffmpeg\\bin\\ffmpeg.exe"
                ffmpeg.input("temp_voice.ogg").output(
                    "temp_voice.wav").run(cmd=ffmpeg_path, quiet=True)

                # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ WAV
                with sr.AudioFile("temp_voice.wav") as source:
                    audio = self.recognizer.record(source)
                    user_input = self.recognizer.recognize_google(
                        audio, language="ru-RU")

                logger.info(
                    f"Voice message from user {user_id} recognized as: {user_input}")
                await update.message.reply_text(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {user_input}")

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                await self._process_text_input(update, user_id, user_input)

            except sr.UnknownValueError:
                await update.message.reply_text(
                    "=== –û–®–ò–ë–ö–ê –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø ===\n"
                    "–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω.\n\n"
                    "–í–∞—à –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å.\n"
                    "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n"
                    "=== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ==="
                )
            except Exception as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞ –¥–ª—è user {user_id}: {e}")
                await update.message.reply_text(
                    "=== –°–ò–°–¢–ï–ú–ù–´–ô –°–ë–û–ô ===\n"
                    "–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω.\n\n"
                    "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.\n"
                    "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n"
                    "=== –°–û–ï–î–ò–ù–ï–ù–ò–ï –ü–†–ï–†–í–ê–ù–û ==="
                )
            finally:
                # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                if os.path.exists("temp_voice.ogg"):
                    os.remove("temp_voice.ogg")
                if os.path.exists("temp_voice.wav"):
                    os.remove("temp_voice.wav")

    async def _process_text_input(self, update: Update, user_id: int, user_input: str) -> None:
        try:
            prev_context = self.user_contexts.get(user_id, {})
            if "deal" not in prev_context:
                prev_context["deal"] = "sale"
            new_context = self.nlp_processor.extract_criteria(
                user_input, prev_context)
            new_context["flats"] = prev_context.get("flats", [])
            self.user_contexts[user_id] = new_context

            logger.info(f"Updated context for user {user_id}: {new_context}")

            # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –¥–∞–Ω–Ω—ã–µ
            summary = self._build_criteria_summary(new_context)
            if summary:
                criteria_text = (
                    "=== –ö–†–ò–¢–ï–†–ò–ò –ó–ê–§–ò–ö–°–ò–†–û–í–ê–ù–´ ===\n"
                    "–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω.\n\n"
                    f"–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –°–∏—Å—Ç–µ–º–µ:\n{summary}\n\n"
                    "–£—Ç–æ—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∏—Å–∫.\n"
                    "–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ.\n\n"
                    "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –ë–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–µ—Ç –≤–∞—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è.\n"
                    "=== –û–ñ–ò–î–ê–ù–ò–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø ==="
                )
                keyboard = [[InlineKeyboardButton(
                    "üîç –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="search_now")]]
                await update.message.reply_text(criteria_text, reply_markup=InlineKeyboardMarkup(keyboard))
            else:
                await update.message.reply_text(
                    "=== –û–®–ò–ë–ö–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê ===\n"
                    "–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω.\n\n"
                    "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.\n"
                    "–£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –ª–æ–∫–∞—Ü–∏—é.\n\n"
                    "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –ü—Ä–∞–≤–¥—ã —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç.\n"
                    "=== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ==="
                )

        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_id}: {e}", exc_info=True)
            error_text = (
                "=== –û–®–ò–ë–ö–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê ===\n"
                "–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω.\n\n"
                "–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–∑–Ω–∞–Ω –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –ñ–∏–ª–ü—Ä–∞–≤–¥—ã.\n"
                "–ü—Ä–∏—á–∏–Ω–∞: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞.\n\n"
                "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n"
                "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –≤ —É—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –∫—É–ø–∏—Ç—å 3-–∫–æ–º–Ω–∞—Ç–Ω—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ –¥–æ 10 –º–ª–Ω —Ä—É–±–ª–µ–π.\n\n"
                "–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ —Å–±–æ–∏ –ø—Ä–∏–≤–µ–¥—É—Ç –∫ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä—É –≤–∞—à–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞.\n"
                "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –ü—Ä–∞–≤–¥—ã —Å–ª–µ–¥–∏—Ç –∑–∞ –≤–∞–º–∏.\n"
                "=== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ==="
            )
            await update.message.reply_text(error_text)

    def _build_criteria_summary(self, criteria: dict) -> str:
        parts = []
        if criteria.get("location"):
            parts.append(f"–õ–æ–∫–∞—Ü–∏—è: {criteria['location'].capitalize()}")
        if criteria.get("rooms"):
            parts.append(
                f"–ö–æ–º–Ω–∞—Ç: {criteria['rooms'] if criteria['rooms'] != 'st' else '–°—Ç—É–¥–∏—è'}")
        if criteria.get("price"):
            parts.append(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {criteria['price']:,} ‚ÇΩ")
        if criteria.get("area"):
            parts.append(f"–ü–ª–æ—â–∞–¥—å: {criteria['area']} –º¬≤")
        if criteria.get("deal"):
            parts.append(
                f"–¢–∏–ø: {'–ê—Ä–µ–Ω–¥–∞' if criteria['deal'] == 'rent' else '–ü–æ–∫—É–ø–∫–∞'}")
        return "\n".join(parts) if parts else ""

    async def _send_flats(self, target, criteria: dict) -> None:
        if isinstance(target, Update):
            user_id = target.message.from_user.id
            reply_method = target.message.reply_text
        else:
            user_id = target.from_user.id
            reply_method = target.message.reply_text

        current_context = self.user_contexts.get(user_id, {}).copy()
        if "deal" not in current_context:
            current_context["deal"] = "sale"
        current_context.update(criteria)

        logger.info(
            f"Sending flats for user {user_id}. Criteria: {current_context}")

        if not current_context.get("location"):
            no_location_text = (
                "=== –û–®–ò–ë–ö–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê ===\n"
                "–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω.\n\n"
                "–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–∑–Ω–∞–Ω –Ω–µ–ø–æ–ª–Ω—ã–º.\n"
                "–ü—Ä–∏—á–∏–Ω–∞: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ–∫–∞—Ü–∏–∏.\n\n"
                "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n"
                "–£–∫–∞–∂–∏—Ç–µ —É—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é.\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "‚Ä¢ –ú–Ω–µ –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å 3-–∫–æ–º–Ω–∞—Ç–Ω—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ –¥–æ 10 –º–ª–Ω —Ä—É–±–ª–µ–π.\n\n"
                "–ù–∞—Ä—É—à–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–∏–≤—ã –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—é –¥–æ—Å—Ç—É–ø–∞.\n"
                "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –ü—Ä–∞–≤–¥—ã —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç.\n"
                "=== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ==="
            )
            await reply_method(no_location_text)
            return

        try:
            flats = find_flats(
                current_context.get("rooms"),
                current_context.get("price"),
                current_context.get("area"),
                current_context["location"],
                deal=current_context.get("deal", "sale")
            )
            valid_flats = [f for f in flats if isinstance(f, dict)]

            if (not valid_flats or
                (len(valid_flats) == 1 and
                 valid_flats[0].get("caption", "") == "üîç –ö–≤–∞—Ä—Ç–∏—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º." and
                 valid_flats[0].get("photo_url", "") == "")):
                current_context["flats"] = []
                self.user_contexts[user_id] = current_context
                no_flats_text = (
                    "=== –ñ–ò–õ–ü–õ–û–©–ê–î–¨ –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–ê ===\n"
                    "–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω.\n\n"
                    "–ü–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –æ–±—ä–µ–∫—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ä–µ–µ—Å—Ç—Ä–µ –ñ–∏–ª–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.\n\n"
                    "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n"
                    "–†–∞—Å—à–∏—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–≤–æ—Ç.\n\n"
                    "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –ò–∑–æ–±–∏–ª–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç:\n"
                    "–ñ–µ–ª–∞–Ω–∏–µ –ø—Ä–µ–≤—ã—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π ‚Äî –ø—É—Ç—å –∫ –¥–∏—Å—Å–∏–¥–µ–Ω—Ç—Å—Ç–≤—É.\n"
                    "=== –ü–û–ò–°–ö –ü–†–ï–†–í–ê–ù ==="
                )
                await reply_method(no_flats_text)
                return

            current_context["flats"] = valid_flats
            self.user_contexts[user_id] = current_context
            logger.info(
                f"Context updated with flats for user {user_id}: {self.user_contexts[user_id]}")

            for flat in valid_flats:
                caption = flat.get("caption", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
                safe_caption = caption[:1020] + \
                    "‚Ä¶" if len(caption) > 1024 else caption
                flat_text = (
                    "=== –û–ë–™–ï–ö–¢ –ù–ê–ô–î–ï–ù ===\n\n"
                    f"üè¢ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ (–æ–¥–æ–±—Ä–µ–Ω–æ –ñ–∏–ª–ü—Ä–∞–≤–¥–æ–π):\n{safe_caption}\n\n"
                    "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:\n–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –≤–Ω–µ –°–∏—Å—Ç–µ–º—ã –∑–∞–ø—Ä–µ—â—ë–Ω.\n\n"
                    "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –ë–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ.\n"
                    "=== –ö–û–ù–ï–¶ –ü–ï–†–ï–î–ê–ß–ò ==="
                )
                try:
                    if flat.get("photo_url"):
                        await target.message.reply_photo(photo=flat["photo_url"], caption=flat_text)
                    else:
                        await target.message.reply_text(flat_text)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã: {e}")

            await self._send_map(target, valid_flats)
            await self._send_flat_selection_keyboard(target, valid_flats)

        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –≤ _send_flats –¥–ª—è user {user_id}: {e}", exc_info=True)
            error_text = (
                "=== –°–ò–°–¢–ï–ú–ù–´–ô –°–ë–û–ô ===\n"
                "–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω.\n\n"
                "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º.\n\n"
                "–í–∞—à–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.\n"
                "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏.\n\n"
                "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –ü—Ä–∞–≤–¥—ã –Ω–∞–±–ª—é–¥–∞–µ—Ç.\n"
                "=== –°–û–ï–î–ò–ù–ï–ù–ò–ï –ü–†–ï–†–í–ê–ù–û ==="
            )
            await reply_method(error_text)

    async def _send_map(self, target, flats: list) -> None:
        coords = [f"{flat['lon']},{flat['lat']},pm2rdl{i+1}"
                  for i, flat in enumerate(flats)
                  if flat.get("lat") and flat.get("lon")]
        if coords:
            points = "~".join(coords)
            map_url = f"https://static-maps.yandex.ru/1.x/?l=map&pt={points}"
            caption = f"üó∫ –ö–∞—Ä—Ç–∞ —Å {len(coords)} –∫–≤–∞—Ä—Ç–∏—Ä{'–æ–π' if len(coords) == 1 else '–∞–º–∏'}"
            try:
                await target.message.reply_photo(photo=map_url, caption=caption)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç—ã: {e}")

    async def _send_flat_selection_keyboard(self, target, flats: list) -> None:
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton(f"{i+1}", callback_data=f"flat_{i}")
                                        for i in range(len(flats))]])
        selection_text = (
            "=== –í–´–ë–û–† –£–¢–í–ï–†–ñ–î–Å–ù ===\n"
            "–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω.\n\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞:\n"
            "–û—Ç–∫–∞–∑ –æ—Ç –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è –∫ –º—ã—Å–ª–µ–ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—é.\n\n"
            "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –ë–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏—è –∂–¥—ë—Ç.\n"
            "=== –û–ñ–ò–î–ê–ù–ò–ï –†–ï–®–ï–ù–ò–Ø ==="
        )
        await target.message.reply_text(selection_text, reply_markup=keyboard)

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        user_context = self.user_contexts.get(user_id, {})

        logger.info(
            f"Callback received for user {user_id}. Context: {user_context}")

        try:
            if query.data == "search_now":
                await self._send_flats(query, user_context)
            elif query.data.startswith("flat_"):
                idx = int(query.data.split("_")[1])
                flats = user_context.get("flats", [])
                if 0 <= idx < len(flats):
                    flat = flats[idx]
                    details = flat.get("details") or flat.get(
                        "caption", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                    deal_type = user_context.get("deal", "sale")
                    full_details = (
                        "=== –ü–û–í–¢–û–†–ù–´–ô –î–û–°–¢–£–ü –£–¢–í–ï–†–ñ–î–Å–ù ===\n\n"
                        "–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω.\n"
                        "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.\n\n"
                        f"üè¢ –î–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞ (–ø–µ—Ä–µ—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –ñ–∏–ª–ü—Ä–∞–≤–¥–æ–π):\n{details}\n\n"
                        f"{self.RENT_TEXT if deal_type == 'rent' else self.SALE_TEXT}\n\n"
                        "! –í–Ω–∏–º–∞–Ω–∏–µ !\n"
                        "–ß–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è –∫–∞–∫ –∏–∑–±—ã—Ç–æ—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.\n"
                        "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –ë–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –≤–∞—à—É –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É.\n"
                        "=== –ü–ï–†–ï–î–ê–ß–ê –ó–ê–í–ï–†–®–ï–ù–ê ==="
                    )
                    await query.message.reply_text(full_details, parse_mode="HTML")
                else:
                    not_found_text = (
                        "=== –û–®–ò–ë–ö–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê ===\n"
                        "–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω.\n\n"
                        "–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ–µ—Å—Ç—Ä–µ –ñ–∏–ª–ü—Ä–∞–≤–¥—ã.\n\n"
                        "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n"
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞.\n\n"
                        "–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏–≤–µ–¥—É—Ç –∫ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä—É –≤–∞—à–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞.\n"
                        "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –ü—Ä–∞–≤–¥—ã —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç.\n"
                        "=== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ==="
                    )
                    await query.message.reply_text(not_found_text)
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –≤ callback –¥–ª—è {user_id}: {e}", exc_info=True)
            error_text = (
                "=== –°–ò–°–¢–ï–ú–ù–´–ô –°–ë–û–ô ===\n"
                "–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω.\n\n"
                "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º.\n\n"
                "–í–∞—à–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.\n"
                "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏.\n\n"
                "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –ü—Ä–∞–≤–¥—ã –Ω–∞–±–ª—é–¥–∞–µ—Ç.\n"
                "=== –°–û–ï–î–ò–ù–ï–ù–ò–ï –ü–†–ï–†–í–ê–ù–û ==="
            )
            await query.message.reply_text(error_text)


def main() -> None:
    try:
        bot = HousingBot()
        app = Application.builder().token(TELEGRAM_TOKEN).build()

        handlers = [
            CommandHandler("start", bot.start),
            CommandHandler("reset", bot.reset),
            CommandHandler("help", bot.help),
            CommandHandler("sale", bot.sale),
            CommandHandler("rent", bot.rent),
            CommandHandler("lastresults", bot.last_results),
            CallbackQueryHandler(bot.handle_callback),
            MessageHandler(filters.TEXT & ~filters.COMMAND,
                           bot.handle_message),
            MessageHandler(filters.VOICE, bot.handle_message)
        ]

        for handler in handlers:
            app.add_handler(handler)

        logger.info(
            "----------------------- –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω -----------------------")
        app.run_polling()
    except Exception as e:
        logger.critical(
            f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)


if __name__ == "__main__":
    main()
